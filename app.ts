/// <reference path="./typings/node/node.d.ts" />/// <reference path="./typings/body-parser/body-parser.d.ts" />/// <reference path="./typings/cookie-parser/cookie-parser.d.ts" />/// <reference path="./typings/errorhandler/errorhandler.d.ts" />/// <reference path="./typings/express/express.d.ts" />/// <reference path="./typings/fs-extra/fs-extra.d.ts" />/// <reference path="./typings/method-override/method-override.d.ts" />/// <reference path="./typings/moment/moment.d.ts" />/// <reference path="./typings/mongoose/mongoose.d.ts" />/// <reference path="./typings/nodemailer/nodemailer.d.ts" />/// <reference path="./typings/winston/winston.d.ts" />/// <reference path="./lib-ext.d.ts" />/// <reference path="./typings/json-fn/json-fn.d.ts" />var extensions = {                   object: require('./public/js/includes/object'),                   string: require('./public/js/includes/string')                 };import bodyParser = require('body-parser');import cookieParser = require('cookie-parser');import crypto = require('crypto');import errorHandler = require('errorhandler');import express = require('express');import fs = require('fs-extra');import logger = require('winston');import mailer = require('nodemailer');import methodOverride = require('method-override');import moment = require('moment');import mongoose = require('mongoose');import path = require('path');import jsonfn = require('json-fn');var applicationRoot = __dirname;var multipart = require('connect-multiparty');var recaptcha = require('recaptcha').Recaptcha;var favicon = require('serve-favicon');var routes = require('./routes/index');var users = require('./routes/users');// Include these filesrequire('./public/js/includes/object.js');require('./public/js/includes/string.js');var eq = String.equals('foo', 'foo');var ne = String.equals('foo', 'bar');var b = String.equals('', '');var app = express();var o:Object = { foo: 'bar' };var hc = Object.hashCode(o);// view engine setupapp.set('views', path.join(__dirname, 'views'));app.set('view engine', 'hbs');// uncomment after placing your favicon in /public//app.use(favicon(__dirname + '/public/favicon.ico'));//app.use(logger('dev'));app.use(bodyParser.json());app.use(bodyParser.urlencoded({ extended: false }));app.use(cookieParser());app.use(express.static(path.join(__dirname, 'public')));app.use('/', routes);app.use('/users', users);// catch 404 and forward to error handlerapp.use(function(req, res, next) {  var err = new Error('Not Found');  err.status = 404;  next(err);});// error handlers// development error handler// will print stacktraceif (app.get('env') === 'development') {  app.use(<express.ErrorRequestHandler> function(err, req, res, next) {    res.status(err.status || 500);    res.render('error', {      message: err.message,      error: err    });  });}// production error handler// no stacktraces leaked to userapp.use(<express.ErrorRequestHandler> function(err, req, res, next) {  res.status(err.status || 500);  res.render('error', {    message: err.message,    error: {}  });});module.exports = app;